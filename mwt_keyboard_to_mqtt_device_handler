#!/usr/bin/python3


"""Executable to read the Key Events from the Barcode Scanner (root Priviledges necessary)"""


import evdev
import time
import sys
import signal

import mwt_keyboard_to_mqtt.config as config
from mwt_keyboard_to_mqtt.mqtt import MqttService

running = True

dev = None


scancodes = {
    # Scancode: ASCIICode
    0: None, 1: u'ESC', 2: u'1', 3: u'2', 4: u'3', 5: u'4', 6: u'5', 7: u'6', 8: u'7', 9: u'8',
    10: u'9', 11: u'0', 12: u'-', 13: u'=', 14: u'BKSP', 15: u'TAB', 16: u'q', 17: u'w', 18: u'e', 19: u'r',
    20: u't', 21: u'y', 22: u'u', 23: u'i', 24: u'o', 25: u'p', 26: u'[', 27: u']', 28: u'CRLF', 29: u'LCTRL',
    30: u'a', 31: u's', 32: u'd', 33: u'f', 34: u'g', 35: u'h', 36: u'j', 37: u'k', 38: u'l', 39: u';',
    40: u'"', 41: u'`', 42: u'LSHFT', 43: u'\\', 44: u'z', 45: u'x', 46: u'c', 47: u'v', 48: u'b', 49: u'n',
    50: u'm', 51: u',', 52: u'.', 53: u'/', 54: u'RSHFT', 56: u'LALT', 57: u' ', 100: u'RALT'
}


capscodes = {
    0: None, 1: u'ESC', 2: u'!', 3: u'@', 4: u'#', 5: u'$', 6: u'%', 7: u'^', 8: u'&', 9: u'*',
    10: u'(', 11: u')', 12: u'_', 13: u'+', 14: u'BKSP', 15: u'TAB', 16: u'Q', 17: u'W', 18: u'E', 19: u'R',
    20: u'T', 21: u'Y', 22: u'U', 23: u'I', 24: u'O', 25: u'P', 26: u'{', 27: u'}', 28: u'CRLF', 29: u'LCTRL',
    30: u'A', 31: u'S', 32: u'D', 33: u'F', 34: u'G', 35: u'H', 36: u'J', 37: u'K', 38: u'L', 39: u':',
    40: u'\'', 41: u'~', 42: u'LSHFT', 43: u'|', 44: u'Z', 45: u'X', 46: u'C', 47: u'V', 48: u'B', 49: u'N',
    50: u'M', 51: u'<', 52: u'>', 53: u'?', 54: u'RSHFT', 56: u'LALT',  57: u' ', 100: u'RALT'
}


# read config
cfg = config.get_config()
event_device_name = cfg["evdev"]["evdev_name"]
search_sleep_s = cfg["evdev"]["search_sleep_s"]
mqtt_topic = cfg["mqtt"]["topic"]
mqtt_topic_status = cfg["mqtt"]["topic_status"]
mqtt_topic_errors = cfg["mqtt"]["topic_errors"]


# setup mqtt
mqtt_service = MqttService(cfg)
mqtt_service.run()


def readBarcodes(devicePath):    
    global dev
    dev = evdev.InputDevice(devicePath)
    dev.grab()
    mqtt_status(f"connected to [{event_device_name}]")
    barcode = ""
    caps = False
    for event in dev.read_loop():
        if(running == False):
            break
        if event.type == evdev.ecodes.EV_KEY:
            data = evdev.categorize(event) # Save the event temporarily to introspect it
            if data.scancode == 42:
                if data.keystate == 1:
                    caps = True
                if data.keystate == 0:
                    caps = False
            if data.scancode == 54:
                if data.keystate == 1:
                    caps = True
                if data.keystate == 0:
                    caps = False                    
            if data.keystate == 1 and data.scancode != 42 and data.scancode != 54: # Catch only keydown, and not Enter
                if caps:
                    key_lookup = u'{}'.format(capscodes.get(data.scancode)) or u'UNKNOWN:[{}]'.format(data.scancode)  # Lookup or return UNKNOWN:XX
                else:
                    key_lookup = u'{}'.format(scancodes.get(data.scancode)) or u'UNKNOWN:[{}]'.format(data.scancode)  # Lookup or return UNKNOWN:XX
                if (data.scancode != 42) and (data.scancode != 54) and (data.scancode != 28):
                    barcode += key_lookup
                if(data.scancode == 28):
                    mqtt_barcode(barcode)
                    barcode = ""


def mqtt_barcode(payload):    
    try:
        mqtt_service.client.publish(
            mqtt_topic,
            payload=payload,
            qos=0,
            retain=False
        )
    except:
        pass
    

def mqtt_status(payload):  
    try:
        mqtt_service.client.publish(
            mqtt_topic_status,
            payload=payload,
            qos=0,
            retain=True
        )
    except:
        pass 
    

def mqtt_errors(payload):  
    try:
        mqtt_service.client.publish(
            mqtt_topic_errors,
            payload=payload,
            qos=0,
            retain=True
        )
    except:
        pass 


def signal_handler(signal, frame):
    mqtt_status('service shutting down')
    try:
        dev.ungrab()
    except:
        pass
    global running
    running = False
    sys.exit(0)


signal.signal(signal.SIGTERM, signal_handler)


def main():

    try:
        while running == True:
            try:
                mqtt_status(f"searching for [{event_device_name}]")
                devices = map(evdev.InputDevice, evdev.list_devices())
                for device in devices:
                    if device.name == event_device_name:
                        if(running == True):
                            mqtt_status(f"establishing communication to [{event_device_name}]")
                            readBarcodes(device.path)

            except KeyboardInterrupt:                
                pass

            except:
                mqtt_errors(f"except for [{sys.exc_info()}]")
                pass

            finally:
                if(running == True):
                    mqtt_status(f"search sleeping for {search_sleep_s}s [{event_device_name}]")
                    time.sleep(search_sleep_s)

    except KeyboardInterrupt:
        pass

    mqtt_status('service stopped')

if __name__ == "__main__":
    main()
